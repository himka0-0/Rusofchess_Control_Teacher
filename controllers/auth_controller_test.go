package controllers

import (
	"awesomeProject1/config"
	"awesomeProject1/models"
	"bytes"
	"encoding/json"
	"golang.org/x/crypto/bcrypt"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/gin-gonic/gin"
	"github.com/stretchr/testify/assert"
)

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
func setupTestServer() *gin.Engine {
	gin.SetMode(gin.TestMode)
	r := gin.Default()
	r.POST("/registration", RegHandler)
	r.POST("/authentication", AutHandler)
	return r
}

// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã
func setupTestDB() {
	config.InitTestDB()
	config.DB = config.TestDB // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î

	// –°–æ–∑–¥–∞–µ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
	config.DB.AutoMigrate(
		&models.User{},
		&models.Table_telegram_bot{}, // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É Telegram
		&models.Table_student{},      // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
		&models.Table_lecture{},      // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
	)
}

func TestRegisterUser(t *testing.T) {
	setupTestDB() // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
	r := setupTestServer()

	userData := models.User{
		Email:    "test@example.com",
		Password: "securepassword",
	}
	userPas, _ := bcrypt.GenerateFromPassword([]byte(userData.Password), bcrypt.DefaultCost)
	UserDataHash := models.User{
		Email:    "test@example.com",
		Password: string(userPas),
	}
	body, _ := json.Marshal(UserDataHash)

	req, _ := http.NewRequest("POST", "/registration", bytes.NewBuffer(body))
	req.Header.Set("Content-Type", "application/json")

	w := httptest.NewRecorder()
	r.ServeHTTP(w, req)

	assert.Equal(t, http.StatusOK, w.Code)
	assert.Contains(t, w.Body.String(), "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
}

func TestLoginUser(t *testing.T) {
	setupTestDB() // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
	r := setupTestServer()

	// –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –±–∞–∑—É
	hashedPassword, _ := bcrypt.GenerateFromPassword([]byte("securepassword"), bcrypt.DefaultCost)

	// –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑–µ —Å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
	config.DB.Create(&models.User{
		Email:          "test@example.com",
		Password:       string(hashedPassword), // üëà –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ—à
		Email_verified: true,
	})

	loginData := models.User{
		Email:    "test@example.com",
		Password: "securepassword", // üëà –û–±—ã—á–Ω—ã–π –ø–∞—Ä–æ–ª—å, –±–µ–∑ —Ö–µ—à–∞
	}

	body, _ := json.Marshal(loginData)
	req, _ := http.NewRequest("POST", "/authentication", bytes.NewBuffer(body))
	req.Header.Set("Content-Type", "application/json")

	w := httptest.NewRecorder()
	r.ServeHTTP(w, req)

	assert.Equal(t, http.StatusOK, w.Code)
	assert.Contains(t, w.Body.String(), `"redirect":"/kabinet"`)
}
